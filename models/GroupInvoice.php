<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "{{%group_invoice}}".
 *
 * @property integer $GROUP_INVOICE_ID
 * @property integer $GROUP_ID
 * @property double $AMOUNT
 * @property double $SERVICE_CHARGE
 * @property double $TOTAL_AMOUNT
 * @property integer $INVOICE_STATUS
 * @property double $CREATED_ON
 * @property double $PAYMENT_DATE
 * @property double $UPDATED_ON
 * @property string $GI_REF_ID
 *
 * @property Partner $partner
 * @property Group $group
 * @property GroupInvoiceMap[] $groupInvoiceMaps
 */
class GroupInvoice extends \yii\db\ActiveRecord
{
    public $PARTNER_ID;
    public $PARTNER_NAME;
    public $PAN_NO;
    public $iagree;

    const SCENARIO_PAYMENT = 'payment';
    const SCENARIO_INSERT = 'insert';
    const SCENARIO_APAYMENT = 'addpayment';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%group_invoice}}';
    }


    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios['SCENARIO_PAYMENT'] = $scenarios['default'] + ['iagree', 'AMOUNT'];
        $scenarios['SCENARIO_INSERT'] = $scenarios['default'] + ['PARTNER_ID', 'PARTNER_NAME', 'PAN_NO'];
        return $scenarios;
    }

    public static function find()
    {
        $find = parent::find();
        if(!Yii::$app instanceof \yii\console\Application) {
            if(!Yii::$app->user->isGuest)  {
                if(Yii::$app->getUser()->identity->USER_TYPE != 'admin')    {
                    $find->joinWith('group')->andWhere([Group::tableName().'.MERCHANT_ID' => Yii::$app->getUser()->identity->MERCHANT_ID]);
                }
            }
        }
        return $find;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['GROUP_ID', 'AMOUNT'], 'required'],
            [['GROUP_ID', 'PARTNER_ID'], 'integer'],
            [['PARTNER_ID'], 'exist', 'targetAttribute' => 'PARTNER_ID', 'targetClass' => Partner::className(), 'on' => 'insert'],
            [['AMOUNT', 'CREATED_ON', 'UPDATED_ON','PAYMENT_DATE'], 'number'],
            [['PARTNER_NAME'], 'string', 'max' => 250],
            [['PAN_NO'], 'string', 'max' => 20],
            [['iagree'], 'compare', 'compareValue' => true, 'on' => 'payment',
                'message' => 'You must agree to the terms and conditions' ],
        ];
    }

    public function beforeSave($insert)
    {
        if($insert) {
            $this->CREATED_ON = time();
        }   else    {
            $this->UPDATED_ON = time();
        }
		
    	$group = Group::findOne($this->GROUP_ID);
    	if($group->APPLY_SC == 1) {
        	//var_dump($group); exit;
        	if(empty($this->SERVICE_CHARGE) && !empty($this->AMOUNT))   {
            	$this->SERVICE_CHARGE = $this->AMOUNT * 2.294 / 100;
        		//$this->SERVICE_CHARGE = 0.00;
        	}
        }

        $this->TOTAL_AMOUNT = $this->AMOUNT + $this->SERVICE_CHARGE;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'GROUP_INVOICE_ID' => 'Group  Invoice  ID',
            'GROUP_ID' => 'Group  ID',
            'PARTNER_ID' => 'Partner  ID',
            'PARTNER_NAME' => 'Partner  Name',
            'AMOUNT' => 'Amount',
            'SERVICE_CHARGE' => 'Service Charge',
            'TOTAL_AMOUNT' => 'Total Amount',
            'PAN_NO' => 'Pan  No',
            'CREATED_ON' => 'Created  On',
            'UPDATED_ON' => 'Updated  On',
            'iagree' => 'I agree',
            'PAYMENT_DATE' => 'Payment Date',
        	//'GI_REF_ID' => 'Reference Id',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroup()
    {
        return $this->hasOne(Group::className(), ['GROUP_ID' => 'GROUP_ID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroupInvoiceMaps()
    {
        return $this->hasMany(GroupInvoiceMap::className(), ['GROUP_INVOICE_ID' => 'GROUP_INVOICE_ID']);
    }
}
