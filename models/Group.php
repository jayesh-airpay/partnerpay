<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "{{%group}}".
 *
 * @property integer $GROUP_ID
 * @property integer $MERCHANT_ID
 * @property string $EMAIL
 * @property double $MOBILE
 * @property string $AIRPAY_MERCHANT_KEY
 * @property string $AIRPAY_MERCHANT_USERNAME
 * @property string $AIRPAY_MERCHANT_PASSWORD
 * @property string $AIRPAY_MERCHANT_SECRETE_KEY
 * @property string $APPLY_SC
 * @property double $CREATED_ON
 * @property double $UPDATED_ON
 *
 * @property MerchantMaster $merchant
 * @property GroupInvoice[] $groupInvoices
 */
class Group extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%group}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['MERCHANT_ID', 'EMAIL', 'MOBILE', 'AIRPAY_MERCHANT_KEY', 'AIRPAY_MERCHANT_USERNAME', 'AIRPAY_MERCHANT_PASSWORD', 'AIRPAY_MERCHANT_SECRETE_KEY', 'APPLY_SC'], 'required'],
            [['MERCHANT_ID'], 'integer'],
            [['EMAIL'], 'email'],
            [['MOBILE'], 'number', 'min' => 1, 'max' => 9999999999, 'message'=>'Number is invalid.', 'tooSmall'=>'Number is invalid.', 'tooBig'=>'Number is invalid.'],
            [['MOBILE', 'CREATED_ON', 'UPDATED_ON'], 'number'],
            [['EMAIL'], 'string', 'max' => 150],
            [['AIRPAY_MERCHANT_KEY', 'AIRPAY_MERCHANT_USERNAME', 'AIRPAY_MERCHANT_PASSWORD', 'AIRPAY_MERCHANT_SECRETE_KEY'], 'string', 'max' => 200]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'GROUP_ID' => 'Group  ID',
            'MERCHANT_ID' => 'Merchant  ID',
            'EMAIL' => 'Email',
            'MOBILE' => 'Mobile',
            'AIRPAY_MERCHANT_KEY' => 'Airpay  Merchant  Key',
            'AIRPAY_MERCHANT_USERNAME' => 'Airpay  Merchant  Username',
            'AIRPAY_MERCHANT_PASSWORD' => 'Airpay  Merchant  Password',
            'AIRPAY_MERCHANT_SECRETE_KEY' => 'Airpay  Merchant  Secrete  Key',
        	'APPLY_SC' => 'Apply Service Charge',
            'CREATED_ON' => 'Created  On',
            'UPDATED_ON' => 'Updated  On',
        ];
    }

    public function beforeSave($insert)
    {
        if($insert) {
            $this->CREATED_ON = time();
        }   else    {
            $this->UPDATED_ON = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMerchant()
    {
        return $this->hasOne(MerchantMaster::className(), ['MERCHANT_ID' => 'MERCHANT_ID']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGroupInvoices()
    {
        return $this->hasMany(GroupInvoice::className(), ['GROUP_ID' => 'GROUP_ID']);
    }
}